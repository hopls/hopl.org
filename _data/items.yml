- name: Semantics
  year: 1900
  description: Introduced in a book of Michel Breal, it refers to the study of how words change their meanings.

- name: Russell's Paradox
  year: 1901
  description: Russell’s paradox shows that every set theory that contains an unrestricted comprehension principle leads to contradictions.

- name: Predicative/Impredicative
  year: 1907
  description: Introduced by Russell, a definition is impredicative if it mentions or quantifies over the set being defined.

- name: Principia Mathematica
  year: 1910
  description: Written by Whitehead and Russell, and aims to express mathmatical propositions via symbolic logic to the greatest extent.

- name: SKI Combinator Calculus
  year: 1924
  description: Introduced by Moses Schönfinkel and Haskell Curry, it's computational system based on abstraction elimination.

- name: Entscheidungsproblem
  year: 1928
  description: Posed by David Hilbert and Wilhelm Ackermann, it's a challenge that asks for an algorithm that considers, as input, a statement and answers "Yes" or "No" according to whether the statement is universally valid.

- name: Lambda Calculus (λ-calculus)
  year: 1930
  description: Introduced by Alonzo Church, λ-calculus is a formal system in mathmatical logic for expressing computation based on function abstraction and application using variable binding and substitution.

- name: Church Encoding
  year: 1930
  description: Introduced by Alonzo Church, it's a means of representing data and operators in the lambda calculus.

- name: Gödel's Incompleteness Theorems
  year: 1931
  description: Published by Kurt Gödel, they show that Hilbert's program to find a complete and consistent set of axioms for all mathematics is impossible.

- name: Cut-Elimination Theorem
  year: 1934
  description: Proved by Gerhard Gentzen, it corresponds to the strong normalization property in higher-order typed lambda calculus.

- name: Turing Machine
  year: 1936
  description: Invented by Alan Turing, it's a mathmatical model of computation that defines an abstract machine that manipulates symbols on a strip of tape according to a table of rules.

- name: Church-Rosser Theorem
  year: 1936
  description: Proved by Alonzo Church and J.Barkley Rosser, it states that, when applying reduction rules to terms, the ordering in which the reductions are chosen does not make a difference to the eventual result.

- name: Simply Typed Lambda Calculus (STLC)
  year: 1940
  description: 'Introduced by Alonzo Church, STLC is a typed interpretation of the lambda calculus with only one type constructor: function types.'

- name: Kleene's Theorem
  year: 1954
  description: 'Kleene presented and proved a theorem which states that all three of these methods of defining languages are equivalent: regular expression, finite automaton and transition graph.'

- name: Chomsky Hierarchy
  year: 1956
  description: Described by Noam Chomsky, it is a containment hierarchy of classes of formal grammars.

- name: Fortran
  year: 1956
  description: Invented by John Backus, it's a imperative language intended for scientific computing.
  
- name: Combinatory Logic
  year: 1958
  description: Introduced by Curry and Feys, aims to provide an analogous way to build up functions and to remove any mention of variables in predicate logic.

- name: Lisp
  year: 1958
  description: Developed by John McCarthy, Lisp (LISt Processing) is a symbolic computational language.

- name: Backus-Naur Form (BNF)
  year: 1959
  description: Proposed by John Backus in ALGOL 58, BNF is a metasyntax notation for context-free grammars.

- name: Lexical Scoping
  year: 1960
  description: Originated in ALGOL 60, it states that name resolution depends on the location in the source code and the lexical context.

- name: Scott Encoding
  year: 1962
  description: Proposed by Dana Scott, it's a way to represent (recursive) data types in the lambda calculus.

- name: Simula
  year: 1962
  description: Developed by Ole-Johan Dahl and Kristen Nygaard, it’s the first object-oriented programming language.
  
- name: SECD Machine (Stack, Environment, Control, Dump)
  year: 1964
  description: Described by Peter J. Landin, it's an abstract machine intended as a target for functional programming language compilers.

- name: ISWIM (If you See What I Mean)
  year: 1966
  description: Devised by Peter Landin in “The Next 700 Programming Languages”, it’s a abstract imperative programming language with functional core.

- name: Ad-hoc Polymorphism
  year: 1967
  description: Introduced by Christopher Strachey, it's also known as funtion overloading.

- name: Hoare Logic
  year: 1969
  description: Proposed by Tony Hoare in "An axiomatic basis for computer programming", it's a formal system for reasoning about the correctness of computer programs.

- name: Curry-Howard Isomorphism
  year: 1969
  description: Proposed by Haskell Curry and William Alvin Howard, it's a correspondence between the programs of simply typed lambda calculus and the proofs of natural deduction.

- name: Scott Topology
  year: 1969
  description: Proposed by D. S. Scott, it’s a topological model for λ-calculus.

- name: Graph Reducation
  year: 1971
  description: First developed by Chris Wadsworth, it's an efficient implementation of non-strict evaluation.
  
- name: De Bruijn Index
  year: 1972
  description: Invented by De Bruijn, it's a tool to represent terms of lambda calculus without naming the bound variables.

- name: Prolog
  year: 1972
  description: Designed by Alain Colmerauer and Robert Kowalski, it's a logical programming language based on unification.
  
- name: Girard's Paradox
  year: 1972
  description: Proposed by Jean-Yves Girard, it's the type-theoretic analogue of Russell's paradox in set theory.

- name: Intuitionistic Type Theory
  year: 1972
  description: Created by Per Martin-Löf, it's a type theory on the principles of mathematical constructivism.

- name: Smalltalk
  year: 1972
  description: Designed by Alan Kay. Smalltalk is a object-oriented language based on the idea of message passing.

- name: System F
  year: 1972
  description: Independently discovered by Jean-Yves Girard and John C. Reynolds, it’s a typed lambda calculus by introducing universal quantification over types.

- name: C
  year: 1972
  description: Designed by Dennis Ritchie, it's a precedure-based language for Unix programming.

- name: Lisp Machine
  year: 1973
  description: Originated in MIT AI Lab, Lisp Machine is a high-level language computer architecture that supports effective garbage collection, windowing systems etc.

- name: ML
  year: 1973
  description: Designed by Robin Milner, it’s a type-safe functional programming language.

- name: Abstract Data Type (ADT)
  year: 1974
  description: First proposed by Barbara Liskov and Stephen N. Zilles, it's a mathmatical model for data types.

- name: SQL
  year: 1974
  description: Developed at IBM by Donald D. Chamberlin and Raymond F. Boyce, it's a DSL for managing data in relational database.
  
- name: Scheme
  year: 1975
  description: Developed by Guy L. Steele and Gerald Jay Sussman, it's a S-expression language based on λ-calculus.

- name: Expression Problem
  year: 1975
  description: First observed by John Reynolds, later formulated by Philip Wadler, it's a challenge problem that concerns the extensibility and modularity of statically typed data abstractions.

- name: Parametric Polymorphism
  year: 1975
  description: First introduced in ML, it's one kind of polymorphism where function and datetype can be written generically so that it can handle values identically without depending on their types.

- name: Functional Programming (FP)
  year: 1977
  description: Presented by John Backus in "Can Programming Be Liberated From the von Neumann Style? A Functional Style and its Algebra of Programs".

- name: Hindley–Milner Type System (HM)
  year: 1978
  description: Independently presented by J. Roger Hindley and Robin Milner, it's a classical type system for λ-calculus with parametric polymorphism.

- name: Algebraic Data Type
  year: 1980
  description: Originated in Hope, it's commonly considered as product type and sum type.

- name: Subtyping Polymorphism
  year: 1980
  description: Formalized by John C. Reynolds, it's a form of polymorphism where types can be subsumed by its subtypes.
  
- name: Objective-C
  year: 1984
  description: Developed by Brad Cox and Tom Love, it's an extension of C language with Smalltalk-style object system.

- name: C++
  year: 1985
  description: Created by Bjarne Stroustrup, it's an extension of C language with object system, templates and the STL.

- name: Chez Scheme
  year: 1985
  description: Designed by R. Kent Dybvig, it's an implementation of Scheme and uses an incremental native-code compiler to produce native binary files.

- name: Emacs Lisp
  year: 1985
  description: Designed by Richard Stallman, it's a scripting Lisp dialect for Emacs.

- name: Mixin
  year: 1986
  description: Originated in Flavors, mixins is an inheritance model that can subsumes multiple-inheritance etc.
  
- name: Calculus of Constructions (CoC)
  year: 1988
  description: Created by Coquand and Huet, it's a higher-order typed lambda calculus with strong normalization.  
  
- name: Coq Proof Assistant
  year: 1989
  description: Based on calculus of inductive constructions, it's an interactive theorem prover.

- name: Row Polymorphism
  year: 1989
  description: Introduced by Mitchell Wand, it's a kind of polymorphism that allows one to write programs that are polymorphic on record field types.

- name: Type Class
  year: 1989
  description: Presented by Wadler and Blott in "How to make ad-hoc polymorphism less ad hoc", it’s a type system construct that solves overloading.

- name: Common Lisp Object System (CLOS)
  year: 1990
  description: CLOS is a dynamic object system that supports multiple dispatch and multiple inheritance.

- name: Haskell
  year: 1990
  description: Named after Haskell Curry, it's a pure typed functional programming language.
  
- name: Lambda Cube (λ-cube)
  year: 1991
  description: Introduced by Henk Barendregt, it's a framework that tries to generalize CoC from λ-calculus in three dimensions.

- name: Python
  year: 1991
  description: Developed by Guido van Rossum, it's a dynamic language that emphasizes code readability.

- name: Glasgow Haskell Compiler (GHC)
  year: 1992
  description: GHC is a modern Haskell Compiler lead by Simon Peyton Jones et al..

- name: Lua
  year: 1993
  description: Designed by Roberto Ierusalimschy, it's a lightweight language intended for embedded use in applications.

- name: Java Virtual Machine (JVM)
  year: 1994
  description: Introduced by Sun Microsystems, it's a virtual machine thats run Java bytecode.

- name: Java
  year: 1995
  description: Designed by James Gosling, it's a typed OOP language that runs on JVM.

- name: Ruby
  year: 1995
  description: Designed by Yukihiro Matsumoto, it’s a pure OOP scripting language with metaprogramming.

- name: Racket (PLT Scheme)
  year: 1995
  description: Founded by Matthias Felleisen as a research group, it's designed as a platform for programming language design and implementation.
  
- name: Yoneda Lemma
  year: 1996
  description: Stated by Yoshiki Kinoshita, it's an abstract result on functors of the type morphisms into a fixed object.
  
- name: Ocaml
  year: 1996
  description: Created in 1996 by Xavier Leroy et al., it's a dialect of ML with an object system.

- name: C#
  year: 2000
  description: Designed at Microsoft by Anders Hejlsberg, it's a typed OOP language that runs on .NET.

- name: Featherweight Java
  year: 2001
  description: Proposed by Atsushi Igarashi et al, it’s a minimal java-like language which models inheritance and subtyping.

- name: Trait
  year: 2003
  description: Proposed by Oscar Nierstrasz et al., traits is a simple compositional model for structuring object-oriented programs.

- name: Scala
  year: 2004
  description: Designed by Martin Odersky, it's a strongly typed language on the idea of combining object-oriented and functional programming.

- name: Lens
  year: 2005
  description: Proposed by J. Nathan Foster et al., it's a solution to view-update problem via bi-directional tree transformations.

- name: CompCert
  year: 2006
  description: Developed by Xavier Leroy, it's a formally verified optimizing compiler for a large subset of CLight.
  
- name: Gradual Typing
  year: 2006
  description: Developed by Jeremy Siek and Walid Taha, it's a type system that allows parts of a program to be dynamically typed and other parts to be statically typed.

- name: Clojure
  year: 2007
  description: Designed by Rich Hickey, it's a functional dialect of Lisp running on JVM.

- name: Go
  year: 2007
  description: Designed by Google, it's a static language for concurrent programming.

- name: Rust
  year: 2010
  description: Designed at Mozilla by Graydon Hoare, it's a static language that emphasizes memory safety.
